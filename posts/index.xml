<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 鸭鸭饲养员</title>
    <link>/posts/</link>
    <description>Recent content in Posts on 鸭鸭饲养员</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 11 Mar 2020 14:17:40 +1100</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker学习笔记</title>
      <link>/2020/03/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 11 Mar 2020 14:17:40 +1100</pubDate>
      
      <guid>/2020/03/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>安装 ubuntu 安装docker 1 2 3 4 5 6 7 8  sudo apt-get update sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&amp;#34; sudo apt-get update apt-cache policy docker-ce # 验证docker repo添加成功 sudo apt-get install docker-ce # 安装docker sudo systemctl status docker # 验证docker安装成功   ubuntu 安装 docker-compose 1 2 3  sudo curl -L &amp;#34;https://github.</description>
    </item>
    
    <item>
      <title>Shell脚本笔记</title>
      <link>/2020/03/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 10 Mar 2020 12:11:04 +1100</pubDate>
      
      <guid>/2020/03/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0/</guid>
      <description>变量  系统给定的特殊变量 自定义变量  判断变量是否为空     语法 基本算法  判断是否为数字 判断上一条命令是否执行成功 判断文件或文件夹是否存在 将多段文字写入文件 判断是否为空   Reference  变量 系统给定的特殊变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  $0	当前脚本的名字 $n	传递给脚本或者函数的参数，n表示第几个参数 $#	传递给脚本或函数的参数个数 $*	传递给脚本或函数的所有参数 $@	传递给脚本或者函数的所有参数 `$$`	当前shell脚本进程的PID $?	函数返回值，或者上个命令的退出状态 $BASH	BASH的二进制文件问的路径 $BASH_ENV	BASH的启动文件 $BASH_VERSINFO[n]	BASH版本信息，有六个元素 $BASH_VERSION	BASH版本号 $EDITOR	脚本所调用的默认编辑器 $EUID	当前有效的用户ID $FUNCNAME	当前函数名 $GROUPS	当前用户所属组 $HOME	当前用户家目录 $HOSTTYPE	主机类型 $LINENO	当前行号 $OSTYPE	操作系统类型 $PATH	PATH路径 $PPID	当前shell进程的父进程ID $PWD	当前工作目录 $SECONDS	当前脚本运行秒数 $TMOUT	不为0时，超过指定的秒将退出shell $UID	当前用户ID   自定义变量 1 2 3 4 5 6  #!</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记之skb</title>
      <link>/2020/03/linux_skb/</link>
      <pubDate>Sun, 08 Mar 2020 00:42:57 +1100</pubDate>
      
      <guid>/2020/03/linux_skb/</guid>
      <description>skb 作用 skb 结构体及操作  skb 初始化 skb 数据操作  skb的copy操作   skb_queue 关于skb的size   Reference  skb 作用 skb 结构体及操作 skb 初始化  分配内存空间  1  skb = alloc_skb(len, GFP_KERNEL);    skb-&amp;gt;head,skb-&amp;gt;data,skb-&amp;gt;tail 都指向skb data buffer一开始的位置 现在的skb的长度是0，因为还没有任何数据 为头部预留空间  1  skb_reserve(skb, header_len);    在这个时候，就需要为头部预留足够的空间 大部分ipv4的header最大长度为sk-&amp;gt;sk_prot-&amp;gt;max_header 此时skb-&amp;gt;data和skb-&amp;gt;tail都指向headroom结束的位置 接下来可以进行skb的data操作了  skb 数据操作  skb_push  在buffer开始之前添加data,添加的长度为len skb-&amp;gt;data的指针减去len skb-&amp;gt;len增加len 返回skb-&amp;gt;data的指针  1  void *skb_push(struct sk_buff *skb, unsigned int len)   skb_push</description>
    </item>
    
    <item>
      <title>VScode实用插件</title>
      <link>/2020/03/vscode%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Thu, 05 Mar 2020 00:53:31 +1100</pubDate>
      
      <guid>/2020/03/vscode%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6/</guid>
      <description>陆续更新中
Arduino  specify the arduino path User.setting -&amp;gt; arduino configuration
Cmd path 是启动脚本所在路径，是在arduino应用文件中的路径
Path 是应用所在路径，是在local目录下的路径 右下角 Select 编译器，板子和端口号
编译器和板子可以回到arduino中查看
vscode-arduino-右下标 右上角 操作
vscode-arduino-右上标
分别是：上传，验证，open changes 验证 生成暂时的.vscode文件夹，存储配置信息  SFTP  远程连接服务器 使用vscode编译服务器端程序 设置 1 2 3 4 5 6 7  { &amp;#34;comment&amp;#34;: &amp;#34;comment&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;ip&amp;#34;, &amp;#34;port&amp;#34;: 22, &amp;#34;username&amp;#34;: &amp;#34;root&amp;#34;, &amp;#34;privateKeyFile&amp;#34;: &amp;#34;_Path_to_the_key_&amp;#34; }    缺点  到现在我都没找到配置文件搁哪，遂卸    Remote-SSH  比SFTP更好用 配置文件清晰 terminal中直接进入远程的terminal路径 缺点  不能远程联入mac系统    </description>
    </item>
    
    <item>
      <title>Hugo 个人静态网站</title>
      <link>/2020/02/hugo/</link>
      <pubDate>Wed, 26 Feb 2020 23:55:28 +0800</pubDate>
      
      <guid>/2020/02/hugo/</guid>
      <description>背景   为什么选择静态网页？
可以配合github page轻松部署，并且因为贫穷，无力支撑服务器费用
  为什么选择hugo？
主流的静态网页，试过Jekyll，Hexo以及wordpress，各有千秋，但是：
 之前的github一直使用Jekyll，使用RubyGem安装依赖的方式始终不习惯，预设环境难上加难，文档也是很复杂 用过一段时间wordpress，但是后期还是想改用markdown写文章 Hexo有大量的中文支持，而且对于JS开发者来说很友好，插件丰富，但是速度慢，发到github page上就更慢了    很多人更换静态主页框架，都是因为发现了更喜欢的模板，我也不例外
此外环境配置到部署都很简单，速度快，一次编译不到1s
还有怀揣着对go的学习精神，最后选择了hugo
Hugo 结构 文件结构 1 2 3 4 5 6 7 8 9  blog ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static ├── themes └── public   Hugo 内容管理 Menus  Menu：可以通过.Site.Menus site variable来获取一系列menu entries的数组  main menu：.Site.Menus.main 在toml下  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  [menu] [[menu.</description>
    </item>
    
    <item>
      <title>Markdown 使用笔记</title>
      <link>/2020/02/markdown%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 06 Feb 2020 23:55:28 +0800</pubDate>
      
      <guid>/2020/02/markdown%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>Markdown笔记 Tools  Typora：支持全平台，可以直接傻瓜式编辑，也可以通过html语句来进行编辑，有模板可以选择，相当于轻量级latex； VScode Markdown All in one：VScode中使用量最大的markdown插件，轻量使用方便，直接markdown语法进行编辑，vscode重度依赖者的福音，支持快捷键输入（cmd+B等），ctrl+shift+p选择指令  Basics 1 2 3 4 5 6 7 8 9 10 11 12 13 14  1. &amp;#39;#&amp;#39; 大标题，&amp;#39;##&amp;#39;,&amp;#39;##...#&amp;#39;,依次为次标题，次...次标题 2. &amp;#39;**&amp;#39; 斜体 3. ‘****’ 加粗 4. &amp;#39;[x] task&amp;#39; 添加任务 5. - one: 添加序号，可用tab降级 6. | 来制作表格，ctrl+shift+I: 转换成table 7. &amp;#39;$$ $$&amp;#39; 制作数学公式 8. [tag](Link): 添加链接 9. 添加图片(本地)：![Alt text](path) 10. 文字居中：&amp;lt;center&amp;gt;hhh &amp;lt;/center&amp;gt; 11. 任务列表 - [ ] task - [x] 完成的task 12. delete line ~~delete~~ or &amp;lt;strike&amp;gt;&amp;lt;/strike&amp;gt;   </description>
    </item>
    
  </channel>
</rss>
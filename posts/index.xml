<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 鸭鸭饲养员</title>
    <link>/posts/</link>
    <description>Recent content in Posts on 鸭鸭饲养员</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 15 Mar 2020 22:01:55 +1100</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker配置环境</title>
      <link>/2020/03/docker%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 15 Mar 2020 22:01:55 +1100</pubDate>
      
      <guid>/2020/03/docker%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</guid>
      <description>docker配置python环境 docker 环境遇到的问题  Got permission denied while trying to connect to the Docker daemon socket  需要给docker进程777的权限    Reference  Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock   </description>
    </item>
    
    <item>
      <title>Shell脚本笔记</title>
      <link>/2020/03/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 10 Mar 2020 12:11:04 +1100</pubDate>
      
      <guid>/2020/03/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0/</guid>
      <description>变量  系统给定的特殊变量 自定义变量   语法 基本算法  变量 系统给定的特殊变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  $0	当前脚本的名字 $n	传递给脚本或者函数的参数，n表示第几个参数 $#	传递给脚本或函数的参数个数 $*	传递给脚本或函数的所有参数 $@	传递给脚本或者函数的所有参数 $$	当前shell脚本进程的PID $?	函数返回值，或者上个命令的退出状态 $BASH	BASH的二进制文件问的路径 $BASH_ENV	BASH的启动文件 $BASH_VERSINFO[n]	BASH版本信息，有六个元素 $BASH_VERSION	BASH版本号 $EDITOR	脚本所调用的默认编辑器 $EUID	当前有效的用户ID $FUNCNAME	当前函数名 $GROUPS	当前用户所属组 $HOME	当前用户家目录 $HOSTTYPE	主机类型 $LINENO	当前行号 $OSTYPE	操作系统类型 $PATH	PATH路径 $PPID	当前shell进程的父进程ID $PWD	当前工作目录 $SECONDS	当前脚本运行秒数 $TMOUT	不为0时，超过指定的秒将退出shell $UID	当前用户ID   自定义变量 1 2 3 4 5 6  #!</description>
    </item>
    
    <item>
      <title>Linux内核学习笔记之skb</title>
      <link>/2020/03/linux_skb/</link>
      <pubDate>Sun, 08 Mar 2020 00:42:57 +1100</pubDate>
      
      <guid>/2020/03/linux_skb/</guid>
      <description>skb 作用 skb 结构体及操作  skb 数据操作  skb的copy操作   skb_queue 关于skb的size   Reference  skb 作用 skb 结构体及操作 skb 数据操作  skb_push  在buffer开始之前添加data,添加的长度为len skb-&amp;gt;data的指针减去len skb-&amp;gt;len增加len 返回skb-&amp;gt;data的指针 skb_push   skb_put  在buffer尾部前添加数据，添加长度为len skb的tail指针获取并没有通过skb-&amp;gt;tail获取，而是通过skb_tail_pointer(skb)获取 skb-&amp;gt;tail指针增加len skb-&amp;gt;len增加len 返回skb-&amp;gt;tail指针 skb_put   skb_pull  从skb头部向后取data 返回的是指向新data的指针 skb_pull   skb_trim  从skb尾部取data  1 2 3 4 5  void skb_trim(struct sk_buff *skb, unsigned int len) { if (skb-&amp;gt;len &amp;gt; len) __skb_trim(skb, len); }    __skb_trim(skb, len) -&amp;gt; __skb_set_length(skb,len):只能针对线性数据而言  1 2 3 4 5 6 7 8  static inline void __skb_set_length(struct sk_buff *skb, unsigned int len) { if (WARN_ON(skb_is_nonlinear(skb))) return; skb-&amp;gt;len = len; skb_set_tail_pointer(skb, len); # 作用是 skb-&amp;gt;tail += offset; }    最后则是将skb-&amp;gt;tail向后加len skb_trim    skb的copy操作 skb定义了诸多的skb_copy方式</description>
    </item>
    
    <item>
      <title>VScode实用插件</title>
      <link>/2020/03/vscode%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Thu, 05 Mar 2020 00:53:31 +1100</pubDate>
      
      <guid>/2020/03/vscode%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6/</guid>
      <description>陆续更新中
Arduino  specify the arduino path User.setting -&amp;gt; arduino configuration
Cmd path 是启动脚本所在路径，是在arduino应用文件中的路径
Path 是应用所在路径，是在local目录下的路径 右下角 Select 编译器，板子和端口号
编译器和板子可以回到arduino中查看
vscode-arduino-右下标 右上角 操作
vscode-arduino-右上标
分别是：上传，验证，open changes 验证 生成暂时的.vscode文件夹，存储配置信息  SFTP  远程连接服务器 使用vscode编译服务器端程序 设置 1 2 3 4 5 6 7  { &amp;#34;comment&amp;#34;: &amp;#34;comment&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;ip&amp;#34;, &amp;#34;port&amp;#34;: 22, &amp;#34;username&amp;#34;: &amp;#34;root&amp;#34;, &amp;#34;privateKeyFile&amp;#34;: &amp;#34;_Path_to_the_key_&amp;#34; }    缺点  到现在我都没找到配置文件搁哪，遂卸    Remote-SSH  比SFTP更好用 配置文件清晰 terminal中直接进入远程的terminal路径 缺点  不能远程联入mac系统    </description>
    </item>
    
    <item>
      <title>Drone 基于Docker的cicd工具</title>
      <link>/2020/03/drone/</link>
      <pubDate>Mon, 02 Mar 2020 10:09:34 +1100</pubDate>
      
      <guid>/2020/03/drone/</guid>
      <description>关于CICD Drone  介绍 实践   Reference  关于CICD CI(持续集成)CD(持续交付/部署)，为的是实现自动化部署和测试，减少人工的参与
具体之后会有另一篇文章讲CICD相关
 CI：远程仓库push代码，触发一系列测试 CD：将远程的默认分支，部署在生产环境上（开发环境亦可） pipeline：构建CICD执行流程的管道 流程 cicd_flow 关于文档的一点吐槽  我也不知道文档是针对0.8版本的，还是1.0版本的，所有blog都是在吐槽，也分不清个所以然 大部分blog都是通过docker-compose来实现，而文档却是建议直接docker进行，所以本文先测试文档，然后再测试compose    Drone 介绍  基于docker的CICD技术，每步构建都在docker中进行 drone server 控制端  drone的服务配置，用于对接主流代码仓库（Github，Gitlab等），并且有相应的api 类似gitlab cicd中的webhook作用 drone服务并不需要管理账号，而是通过代码托管仓库提供具有权限的账户   drone agent 客户端  也就是文档中所谓的drone runner 具体执行CI的pipeline   开发者需要在项目中包含.drone.yml文件,将代码推送到git仓库,drone就能够自动化的进行编译/测试/发布  实践 以Github为例
  创建OAuth账户
 developer settings -&amp;gt; OAuth apps -&amp;gt; register new 生成shared secret  1  openssl rand -hex 16     docker pull drone/drone:1</description>
    </item>
    
    <item>
      <title>Hugo 个人静态网站</title>
      <link>/2020/02/hugo/</link>
      <pubDate>Wed, 26 Feb 2020 23:55:28 +0800</pubDate>
      
      <guid>/2020/02/hugo/</guid>
      <description>背景   为什么选择静态网页？
可以配合github page轻松部署，并且因为贫穷，无力支撑服务器费用
  为什么选择hugo？
主流的静态网页，试过Jekyll，Hexo以及wordpress，各有千秋，但是：
 之前的github一直使用Jekyll，使用RubyGem安装依赖的方式始终不习惯，预设环境难上加难，文档也是很复杂 用过一段时间wordpress，但是后期还是想改用markdown写文章 Hexo有大量的中文支持，而且对于JS开发者来说很友好，插件丰富，但是速度慢，发到github page上就更慢了    很多人更换静态主页框架，都是因为发现了更喜欢的模板，我也不例外
此外环境配置到部署都很简单，速度快，一次编译不到1s
还有怀揣着对go的学习精神，最后选择了hugo
Hugo 结构 文件结构 1 2 3 4 5 6 7 8 9  blog ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── static ├── themes └── public   Hugo 内容管理 Menus  Menu：可以通过.Site.Menus site variable来获取一系列menu entries的数组  main menu：.Site.Menus.main 在toml下  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  [menu] [[menu.</description>
    </item>
    
    <item>
      <title>lora 学习笔记</title>
      <link>/2020/02/lora/</link>
      <pubDate>Wed, 26 Feb 2020 23:55:28 +0800</pubDate>
      
      <guid>/2020/02/lora/</guid>
      <description>Lora  Lora 是Long Range缩写，归Semtech公司所有  Reference </description>
    </item>
    
    <item>
      <title>Markdown 使用笔记</title>
      <link>/2020/02/markdown%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 06 Feb 2020 23:55:28 +0800</pubDate>
      
      <guid>/2020/02/markdown%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>Markdown笔记 Tools  Typora：支持全平台，可以直接傻瓜式编辑，也可以通过html语句来进行编辑，有模板可以选择，相当于轻量级latex； VScode Markdown All in one：VScode中使用量最大的markdown插件，轻量使用方便，直接markdown语法进行编辑，vscode重度依赖者的福音，支持快捷键输入（cmd+B等），ctrl+shift+p选择指令  Basics 1 2 3 4 5 6 7 8 9 10 11 12 13 14  1. &amp;#39;#&amp;#39; 大标题，&amp;#39;##&amp;#39;,&amp;#39;##...#&amp;#39;,依次为次标题，次...次标题 2. &amp;#39;**&amp;#39; 斜体 3. ‘****’ 加粗 4. &amp;#39;[x] task&amp;#39; 添加任务 5. - one: 添加序号，可用tab降级 6. | 来制作表格，ctrl+shift+I: 转换成table 7. &amp;#39;$$ $$&amp;#39; 制作数学公式 8. [tag](Link): 添加链接 9. 添加图片(本地)：![Alt text](path) 10. 文字居中：&amp;lt;center&amp;gt;hhh &amp;lt;/center&amp;gt; 11. 任务列表 - [ ] task - [x] 完成的task 12. delete line ~~delete~~ or &amp;lt;strike&amp;gt;&amp;lt;/strike&amp;gt;   </description>
    </item>
    
  </channel>
</rss>
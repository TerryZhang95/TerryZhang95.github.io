<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>通信就是坑 on 鸭鸭饲养员</title>
    <link>/categories/%E9%80%9A%E4%BF%A1%E5%B0%B1%E6%98%AF%E5%9D%91/</link>
    <description>Recent content in 通信就是坑 on 鸭鸭饲养员</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 08 Mar 2020 00:42:57 +1100</lastBuildDate>
    
	<atom:link href="/categories/%E9%80%9A%E4%BF%A1%E5%B0%B1%E6%98%AF%E5%9D%91/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux内核学习笔记之skb</title>
      <link>/2020/03/linux_skb/</link>
      <pubDate>Sun, 08 Mar 2020 00:42:57 +1100</pubDate>
      
      <guid>/2020/03/linux_skb/</guid>
      <description>skb 是干什么的 skb 如何工作 1 2 3 4 5 6 7  struct sk_buff { /* These two members must be first. */ struct sk_buff	*next; struct sk_buff	*prev; struct sk_buff_head	*list;    headroom,tail reserve 数据操作  skb_push  在buffer开始之前添加data skb_push   skb_put  在buffer尾部前添加数据】 skb_put   skb_pull skb_trim   skb_queue  Manage packets in a queue structure using struct sk_buff_head 1 2 3 4 5 6  struct sk_buff_head { struct sk_buff *next; struct sk_buff *prev; __u32 qlen; spinlock_t lock; };       Reference  Basic functions for sk_buff{} How SKB works Network Buffers and Memory Management  </description>
    </item>
    
    <item>
      <title>lora 学习笔记</title>
      <link>/2020/02/lora/</link>
      <pubDate>Wed, 26 Feb 2020 23:55:28 +0800</pubDate>
      
      <guid>/2020/02/lora/</guid>
      <description>Lora  Lora 是Long Range缩写，归Semtech公司所有  Reference </description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>合格的运维 on 鸭鸭饲养员</title>
    <link>/categories/%E5%90%88%E6%A0%BC%E7%9A%84%E8%BF%90%E7%BB%B4/</link>
    <description>Recent content in 合格的运维 on 鸭鸭饲养员</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 15 Mar 2020 22:01:55 +1100</lastBuildDate>
    
	<atom:link href="/categories/%E5%90%88%E6%A0%BC%E7%9A%84%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker配置环境</title>
      <link>/2020/03/docker%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sun, 15 Mar 2020 22:01:55 +1100</pubDate>
      
      <guid>/2020/03/docker%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</guid>
      <description>docker配置python环境 docker 环境遇到的问题  Got permission denied while trying to connect to the Docker daemon socket  需要给docker进程777的权限    Reference  Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock   </description>
    </item>
    
    <item>
      <title>Shell脚本笔记</title>
      <link>/2020/03/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 10 Mar 2020 12:11:04 +1100</pubDate>
      
      <guid>/2020/03/shell%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0/</guid>
      <description>变量  系统给定的特殊变量 自定义变量   语法 基本算法  变量 系统给定的特殊变量 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  $0	当前脚本的名字 $n	传递给脚本或者函数的参数，n表示第几个参数 $#	传递给脚本或函数的参数个数 $*	传递给脚本或函数的所有参数 $@	传递给脚本或者函数的所有参数 $$	当前shell脚本进程的PID $?	函数返回值，或者上个命令的退出状态 $BASH	BASH的二进制文件问的路径 $BASH_ENV	BASH的启动文件 $BASH_VERSINFO[n]	BASH版本信息，有六个元素 $BASH_VERSION	BASH版本号 $EDITOR	脚本所调用的默认编辑器 $EUID	当前有效的用户ID $FUNCNAME	当前函数名 $GROUPS	当前用户所属组 $HOME	当前用户家目录 $HOSTTYPE	主机类型 $LINENO	当前行号 $OSTYPE	操作系统类型 $PATH	PATH路径 $PPID	当前shell进程的父进程ID $PWD	当前工作目录 $SECONDS	当前脚本运行秒数 $TMOUT	不为0时，超过指定的秒将退出shell $UID	当前用户ID   自定义变量 1 2 3 4 5 6  #!</description>
    </item>
    
    <item>
      <title>Drone 基于Docker的cicd工具</title>
      <link>/2020/03/drone/</link>
      <pubDate>Mon, 02 Mar 2020 10:09:34 +1100</pubDate>
      
      <guid>/2020/03/drone/</guid>
      <description>关于CICD Drone  介绍 实践   Reference  关于CICD CI(持续集成)CD(持续交付/部署)，为的是实现自动化部署和测试，减少人工的参与
具体之后会有另一篇文章讲CICD相关
 CI：远程仓库push代码，触发一系列测试 CD：将远程的默认分支，部署在生产环境上（开发环境亦可） pipeline：构建CICD执行流程的管道 流程 cicd_flow 关于文档的一点吐槽  我也不知道文档是针对0.8版本的，还是1.0版本的，所有blog都是在吐槽，也分不清个所以然 大部分blog都是通过docker-compose来实现，而文档却是建议直接docker进行，所以本文先测试文档，然后再测试compose    Drone 介绍  基于docker的CICD技术，每步构建都在docker中进行 drone server 控制端  drone的服务配置，用于对接主流代码仓库（Github，Gitlab等），并且有相应的api 类似gitlab cicd中的webhook作用 drone服务并不需要管理账号，而是通过代码托管仓库提供具有权限的账户   drone agent 客户端  也就是文档中所谓的drone runner 具体执行CI的pipeline   开发者需要在项目中包含.drone.yml文件,将代码推送到git仓库,drone就能够自动化的进行编译/测试/发布  实践 以Github为例
  创建OAuth账户
 developer settings -&amp;gt; OAuth apps -&amp;gt; register new 生成shared secret  1  openssl rand -hex 16     docker pull drone/drone:1</description>
    </item>
    
  </channel>
</rss>